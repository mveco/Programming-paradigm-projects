(ns user)

(def suits ["C" "D" "H" "S"]) ;Можни бои на картите
(def ranks [1 2 3 4 5 6 7 8 9 "T", "J", "Q", "K", "A"]) ;Можни вредности на картите

;1
(defn suit [card] "Ја враќа бојата на картата card.
  Картата претставува стринг од вреднот и боја, па вториот знак од стрингот ја претставува бојата."
  (str (second card))
  )

(def card_conversion {"T" 10, "J" 11, "Q" 12, "K" 13, "A" 14})

;2
(defn rank [card] "Ја враќа вредноста на картата како цел број, во вредност 2-14.
  Картата претставува стринг од вреднот и боја, па првиот знак од стрингот ја претставува вредноста.
  За броевите 1-9 не е потребна конверзија, па се браќа првиот знак во стрингот како нумеричка вредност.
  За буквите е потребна конверзија, се постигнува со помош на хешот card_conversion"
  (cond
    (Character/isDigit (first card)) (Character/digit (first card) 10)
    :else (card_conversion (str (first card)))
    )
  )


(defn rank-helper [hand] "Помошна функција, враќа сортирана листа од подлисти. Секоја подлиста се состои од ранк на карта и бр појавувања на карта од тој ранк.
  Подредувањето се врши со прв критериум поголем број на појавување на тој ранк, а потоа повисок ранг."
  (sort #(> (second %1) (second %2)) (frequencies (reverse (sort (map rank hand )))))
  )
;Пример, (rank-helper ["5H" "AD" "5C" "7D" "AS"]) враќа ([14 2] [5 2] [7 1])."

;3
(defn pair? [hand] " враќа true ако hand содржи две (но не повеќе од две) карти со иста вредност.
  Со (rank-helper hand) се добива листа од подредени ранкови и бр на појавување на истите. Ако првиот ранк се појавува 2 пати,
  а вториот еднаш, значи има само две карти со ист ранк, па се работи за пар."
  (let [count (rank-helper hand) ]
     (and (= (second (first count)) 2) (= (second (second count)) 1))
    )
  )

;4
(defn three-of-a-kind? [hand] "враќа true ако hand содржи три (но не повеќе од три) карти со иста вредност.
  Со (rank-helper hand) се добива листа од подредени ранкови и бр на појавување на истите. Ако првиот ранк се појавува 3 пати,
  а вториот еднаш, значи има само три карти со ист ранк, па се работи за три исти карти."
  (let [count (rank-helper hand) ]
     (and (= (second (first count)) 3) (= (second (second count)) 1))
    )
  )

;5
(defn four-of-a-kind? [hand] "враќа true ако hand содржи точно четри карти со иста вредност.
  Со (rank-helper hand) се добива листа од подредени ранкови и бр на појавување на истите. Ако првиот ранк се појавува 4 пати,
  значи иматочно 4 карти со ист ранк, па се работи за четри исти карти."
  (let [count (sort #(> (second %1) (second %2)) (frequencies (map rank hand)))]
     (= (second (first count)) 4)
    )
  )

;6
(defn flush? [hand] "враќа true ако сите карти во hand се со иста боја, но не се во секвенца(последователни).
  Во colour се враќа листа од боите на сите карти, а во numbers листа во опаѓачки редослед од вредностите на сите карти во hand.
  Ако сите вредности во colour се еднакви(проверува првиот услов во and) и картите не се последователни(вротиот услов во and) се работи за flush.
  Третиот услов е за специјалниот случај кога Ace(вредност 14) се зема како 1."
  (let [colour (map suit hand) numbers (sort (map rank hand))]
      (and (every? #(= (first colour) %) (rest colour)) (not= 4 (- (last numbers) (first numbers))) (not= numbers '(2 3 4 5 14)))
    )
  )

;7
(defn full-house? [hand] " враќа true ако hand содржи три карти со иста вредност и уште две карти со иста вредност (комбинација 3+2).
  Со (rank-helper hand) се добива листа од подредени ранкови и бр на појавување на истите. Ако првиот ранк се појавува 3 пати,
  а вториот 2, значи има три карти со ист ранк и уште две со ист ранк, па се работи за full-house."
  (let [count (rank-helper hand)]
     (and (= (second (first count)) 3) (= (second (second count)) 2))
    )
  )

;8
(defn two-pairs? [hand] "враќа true ако hand содржи два парови на карти кои имаат иста вредност (комбинација 2+2, но не и комбинација 3+2)
  Со (rank-helper hand) се добива листа од подредени ранкови и бр на појавување на истите. Ако првиот ранк се појавува 2 пати,
  и вториот 2, значи има два пара карти со ист ранк, па се работи за two-pairs."
  (let [count (rank-helper hand)]
     (and (= (second (first count)) 2) (= (second (second count)) 2))
    )
  )

;9
(defn straight? [hand] "враќа true ако hand содржи карти кои имаат 5 последователни вредности, но немаат сите карти иста боја.
  Асот може да се смета или како вредност 14 или како вредност 1.
  Во colour се враќа листа од боите на сите карти, а во numbers листа во опаѓачки редослед од вредностите на сите карти во hand.
  Ако вредностите во colour не се еднакви(проверува првиот услов во and) и картите се последователни(вротиот услов во and) се работи за straight.
  Вториот услов во or е за специјалниот случај кога Ace(вредност 14) се зема како 1."
  (let [colour (map suit hand) numbers (sort (map rank hand))]
      (and (every? #(not= (first colour) %) (rest colour))
           (or (= 4 (- (last numbers) (first numbers))) (= numbers '(2 3 4 5 14)))
        )
    )
  )

;10
(defn straight-flush? [hand] "враќа true ако hand е и straight и flush.
  Во colour се враќа листа од боите на сите карти, а во numbers листа во опаѓачки редослед од вредностите на сите карти во hand.
  Ако вредностите во colour се еднакви(проверува првиот услов во and) и картите се последователни(вротиот услов во and) се работи за straight-flush.
  Вториот услов во or е за специјалниот случај кога Ace(вредност 14) се зема како 1."
  (let [colour (map suit hand) numbers (sort (map rank hand))]
      (and (every? #(= (first colour) %) (rest colour))
           (or (= 4 (- (last numbers) (first numbers))) (= numbers '(2 3 4 5 14)))
        )
    )
  )

;11
(defn value [hand] "враќа вредност на hand во зависност од тоа за која од претходните функции враќа true"
  (cond
    (pair? hand) 1
    (two-pairs? hand) 2
    (three-of-a-kind? hand) 3
    (straight? hand) 4
    (flush? hand) 5
    (full-house? hand) 6
    (four-of-a-kind? hand) 7
    (straight-flush? hand) 8
    :else 0
    )
  )

;12
(defn kickers [hand] "враќа подредена листа од вредности (цели броеви) на картите во комбинацијата на влез, при што подредувањето е
  дефинирано во зависност од вредноста на самата комбинација."
  (let [x (value hand)]
    (cond
      (or (= x 5) (= x 0)) (sort > (map rank hand)) ;за flush: Вредностите по опаѓачки редослед, истото важи и за кога нема никаква комбинација
      (or (= x 4) (= x 8)) ;за straight и straight-flush: Вредностите по опаѓачки редослед.
        (let [in-order (sort > (map rank hand))]
          (if (and (= (first in-order) 14) (= (second in-order) 5))  (concat (rest in-order) [1]) in-order)
          );специјален случај, ако се работи за карти 1-5, се добива листа (14 5 4 3 2), тераб да се трансформира во (5 4 3 2 1)
      :else (keys (rank-helper hand)) ;зa останатите, подредувањето се врши со прв критериум поголем број на појавување на тој ранк, а потоа повисок ранг.
      )
    )
  )

;13
(defn higher-kicker? [kicker1 kicker2] "споредува две подредени листи од вредности (дефинирани како во претходната функција).
  Враќа true ако првата подредена листа е поголема од втората (го има поголемиот елемент на првата позиција на која двете листи имаат различни елементи),
  и false ако втората подредена листа е поголема или ако двете листи се идентични."
  (cond
    (empty? kicker1) false
    (> (first kicker1) (first kicker2)) true
    :else (higher-kicker? (rest kicker1) (rest kicker2))
   )
  )

;14
(defn beats? [hand1 hand2] "враќа true ако вредноста на hand1 е поголема од вредноста на hand2. Ако двете комбинации имаат иста вредност, тогаш се
  споредуваат нивните подредени листи и функцијата враќа true ако подредената листа на првата комбинација е поголема од подредената листа на втората комбинација.
  Во сите други случаи функцијата враќа nil."
  (cond
    (> (value hand1) (value hand2)) true ;кога е поголема вредноста на 1та комбинација
    (= (value hand1) (value hand2)) (if
                                      (higher-kicker? (kickers hand1) (kickers hand2)) true nil) ;Ако е иста вредноста, се спредуваат подредените листи. prima hand a treb alista smeni!!!!!!!!!
    :else nil ;инаку
    )
  )


;15
(defn winning-hand [& hands] "ја враќа победничката комбинација (онаа која ги победува сите останати кои се проследуваат на влез) или, во
  случај на изедначеност, ја враќа секвенцата (листа или вектор) на комбинациите кои се изедначени. Враќа nil ако на влез не се даде ниту една комбинација."
    (reduce #(if (beats? %1 %2) %1 %2) hands)
  )












